name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker
        uses: docker/setup-docker-action@v4

      - name: Build Docker image
        run: |
          # Ideally, we find a way to use caching here
          export GIT_HASH=$(git rev-parse HEAD)
          docker compose --profile test build \
          --build-arg TESTING=true \
          --build-arg GIT_HASH=$GIT_HASH \
          --build-arg ENV_FILE=.env.dummy
        env:
          POSTGRES_HOST: postgres_test_for_django

      - name: Test in Docker
        run: |
          echo "üî® Starting Docker compose tests..."
          export GIT_HASH=$(git rev-parse HEAD)
          if docker compose --profile test up --abort-on-container-exit --exit-code-from djangoapp; then
            echo "‚úÖ Tests passed!"
            exit 0
          else
            echo "‚ùå Tests failed!"
            exit 1
          fi

          # Exit with the original pytest exit code so the job still fails if tests failed
          exit $code
        env:
          TESTING: "true"
          ENV_FILE: .env.dummy # Use dummy env for testing
          POSTGRES_HOST: postgres_test_for_django
          # OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }} # Uncomment if you need to use OpenAI API in tests

      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: test-results/coverage.xml

      - name: Upload test results
        if: always() # even on failure
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
