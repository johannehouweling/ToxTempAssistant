name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
          TESTING: "true" # Set to true for testing
          ENV_FILE: .env.dummy # Use dummy env for testing
        run: |
          GIT_HASH=$(git rev-parse HEAD)

          docker buildx bake \
          --load \
          --file docker-compose.yml \
          --set '*.build-arg.TESTING=true' \
          --set '*.build-arg.TOXTEMPASS_GIT_HASH='"$GIT_HASH" \
          --set '*.cache-from=type=gha' \
          --set '*.cache-to=type=gha,mode=max'

      - name: Test in Docker
        run: |
          echo "üî® Starting Docker compose tests..."
          if docker compose up --abort-on-container-exit --exit-code-from djangoapp; then
            echo "‚úÖ Tests passed!"
            exit 0
          else
            echo "‚ùå Tests failed!"
            exit 1
          fi

          # Figure out which container ran djangoapp
          CONTAINER_ID=$(docker compose ps -q djangoapp)
          echo "üì¶ Copying test-results from container $CONTAINER_ID ‚Ä¶"
          mkdir -p test-results
          docker cp "$CONTAINER_ID":/tmp/test-results/. ./test-results/ || echo "‚ö†Ô∏è No test-results directory found in the container."

          # Exit with the original pytest exit code so the job still fails if tests failed
          exit $code
        env:
          TESTING: "true"
          ENV_FILE: .env.dummy # Use dummy env for testing
          # OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }} # Uncomment if you need to use OpenAI API in tests

      - name: Upload test results
        if: always() # even on failure
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
