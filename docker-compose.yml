name: toxtempass
services:
  # Database
  postgres_for_django:
    profiles: ["prod"]
    image: postgres:17-alpine
    container_name: postgres_for_django
    restart: unless-stopped
    env_file:
      - ${ENV_FILE:-./.env}
    expose:
      - 5432
    networks:
      - db_network
    volumes:
      - db_data:/var/lib/postgresql/data

  postgres_test_for_django:
    profiles: ["test"]
    image: postgres:17-alpine
    container_name: postgres_test_for_django
    restart: unless-stopped
    env_file:
      - ${ENV_FILE:-./.env} # Use ENV ENV_FILE to .env.dummy for testing to run properly
    expose:
      - 5432
    networks:
      - db_network
    # No volumes to ensure ephemeral test DB

  # Django app
  djangoapp:
    profiles: ["test", "prod"]
    build:
      context: .
      dockerfile: myocyte/dockerfiles/djangoapp/Dockerfile
      args:
        GIT_HASH: ${GIT_HASH}
        GIT_TAG: ${GIT_TAG}
    labels:
      org.opencontainers.image.revision: ${GIT_HASH}
      org.opencontainers.image.version: ${GIT_TAG}
    user: root
    container_name: djangoapp
    restart: unless-stopped
    entrypoint: ["/home/myocyte/django_startup.sh"]
    command: >
      poetry run gunicorn myocyte.wsgi:application
      --bind 0.0.0.0:8000
      --log-level=info
      --max-requests=1000
      --timeout=600
      --keep-alive=5
      --graceful-timeout=120
      --error-logfile=/home/myocyte/logs/gunicorn-error.log
      --access-logfile=/home/myocyte/logs/gunicorn-access.log
      --workers=3
    volumes:
      - ./myocyte/logs:/home/myocyte/logs
      - ./myocyte/static:/home/myocyte/static
      - ./myocyte/media:/home/myocyte/media
      - ./test-results:/home/myocyte/test-results
    ports:
      - 8401:8000
    depends_on:
      # ensure in a production environment that the database is up before starting Django
      - ${POSTGRES_HOST:-postgres_for_django}
    env_file:
      - ${ENV_FILE:-./.env}
    environment:
      - TESTING=${TESTING:-false} # Set to true for testing
      - GIT_HASH=${GIT_HASH}
      - GIT_TAG=${GIT_TAG}
    networks:
      - db_network
      ### ATTENTION ###
      # The djangoapp container needs to be connected to the db_network
      # to access the Postgres database, but also to the default bridge network
      # to allow it to be accessed from the host machine.
      # This is because the default bridge network is used by Docker Compose
      # `docker network connect bridge djangoapp`
networks:
  db_network:
    driver: bridge
volumes:
  db_data:
