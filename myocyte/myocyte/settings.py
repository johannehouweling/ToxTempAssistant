"""
Django settings for myocyte project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv
from django.core.management.utils import get_random_secret_key
import logging 

_LOG = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# in Docker system variables are set in the Dockerfile
# in local development, we use a .env file to set environment variables

TESTING = bool(os.getenv("TESTING")) or (len(sys.argv) > 1 and sys.argv[1] == "test")

# 2) Build your paths
env_path       = BASE_DIR / ".env"
dummy_env_path = BASE_DIR / ".env.dummy"

# 3) Choose which one to load
if TESTING or not env_path.exists():
    ENV_FILE = dummy_env_path
else:
    ENV_FILE = env_path

# 4) (Optionally) alert the user what you picked
_LOG.info(f"Using environment file: {ENV_FILE}", file=sys.stderr)

load_dotenv(ENV_FILE,override=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/


# SECURITY WARNING: don't run with debug turned on in production!
DJANGO_DEBUG = os.getenv("DJANGO_DEBUG", "true").lower()  # default to "true" if not set

if DJANGO_DEBUG == "false":
    DEBUG = False
else:
    DEBUG = True
    INTERNAL_IPS = ["localhost", "127.0.0.1"]

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY and (DEBUG or TESTING):
    SECRET_KEY = get_random_secret_key()

USE_POSTGRES = (
    os.getenv("USE_POSTGRES", "false").strip().lower() == "true"
)  # default to "false" if not set
if not USE_POSTGRES and not DEBUG:
    _LOG.critical(
        "USE_POSTGRES is not set to true, but DEBUG is false. This is not a valid  production configuration."
    )

ALLOWED_HOSTS = (
    os.getenv("ALLOWED_HOSTS").split(",") if os.getenv("ALLOWED_HOSTS") else []
)
# so nginx proxy can set the correct protocol also requires Nginx to set the header
# proxy_set_header X-Forwarded-Proto $scheme;
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

CSRF_TRUSTED_ORIGINS = (
    os.getenv("CSRF_TRUSTED_ORIGINS").split(",")
    if os.getenv("CSRF_TRUSTED_ORIGINS")
    else []
)

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_bootstrap5",
    "toxtempass",
    "simple_history",
    "django_extensions",
    "guardian",  # Model instance user access filtering
    "django_q",  # for task queue
    "django_tables2",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",  # comes with INSTALLED_APPS = "simple_history" and takes care of who made changes
]

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",  # Default
    "guardian.backends.ObjectPermissionBackend",  # for guardian
)

ANONYMOUS_USER_ID = -1

ROOT_URLCONF = "myocyte.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "toxtempass/templates/toxtempass/", BASE_DIR],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "toxtempass.context_processors.toxtempass_config",
            ],
        },
    },
]

WSGI_APPLICATION = "myocyte.wsgi.application"


if TESTING:
    _LOG.info("Using sqlite for tests")
    USE_POSTGRES = (
        os.getenv("USE_POSTGRES", "false").strip().lower() == "true"
    )
    if not USE_POSTGRES:
        # Use in-memory SQLite database for tests
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": ":memory:",
            }
        }
    else:
        # Use Postgres for tests, read test-specific env vars
        _LOG.info("Using Postgres for tests")
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.postgresql",
                "NAME": os.getenv("TEST_POSTGRES_DB"),
                "USER": os.getenv("TEST_POSTGRES_USER"),
                "PASSWORD": os.getenv("TEST_POSTGRES_PASSWORD"),
                "HOST": os.getenv("TEST_POSTGRES_HOST"),
                "PORT": os.getenv("TEST_POSTGRES_PORT"),
            }
        }
else:
    if not USE_POSTGRES:
        _LOG.info("Using SQLite for development")
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": BASE_DIR / "db.sqlite3",
            }
        }
    else:
        _LOG.info("In Production: Using Postgres")
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.postgresql",
                "NAME": os.getenv("POSTGRES_DB"),
                "USER": os.getenv("POSTGRES_USER"),
                "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
                "HOST": os.getenv("POSTGRES_HOST"),
                "PORT": os.getenv("POSTGRES_PORT"),
            }
        }

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "django_cache_table",
    }
}

# Django Q settings
Q_CLUSTER = {
    "name": "DjangORM",
    "label": "Toxtempass Task Queue",
    "workers": 1,
    "timeout": 600,  # 10 minutes allowed for each task
    "retry": 620,
    "queue_limit": 50,
    # 'save_limit': 50,  # delete all task when more than n stored.
    "bulk": 10,
    "orm": "default",
    "max_attempts": 2,
    "sync": False,
}
if DEBUG:
    Q_CLUSTER["sync"] = True  # Use Django ORM for development

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


AUTH_USER_MODEL = "toxtempass.Person"

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "detailed",
        },
    },
    "formatters": {
        "detailed": {
            "format": "{asctime} {levelname} {message}",
            "style": "{",
        },
    },
    "loggers": {
        "llm": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "views": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "forms": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Media location
MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"
